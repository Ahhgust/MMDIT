// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "MMDIT_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// str2int
int str2int(Rcpp::StringVector s, std::vector<int>& out);
RcppExport SEXP _MMDIT_str2int(SEXP sSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(str2int(s, out));
    return rcpp_result_gen;
END_RCPP
}
// fst_buckleton
NumericVector fst_buckleton(Rcpp::StringVector alleles, Rcpp::StringVector populations, int nJack, bool approximate);
RcppExport SEXP _MMDIT_fst_buckleton(SEXP allelesSEXP, SEXP populationsSEXP, SEXP nJackSEXP, SEXP approximateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type alleles(allelesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type populations(populationsSEXP);
    Rcpp::traits::input_parameter< int >::type nJack(nJackSEXP);
    Rcpp::traits::input_parameter< bool >::type approximate(approximateSEXP);
    rcpp_result_gen = Rcpp::wrap(fst_buckleton(alleles, populations, nJack, approximate));
    return rcpp_result_gen;
END_RCPP
}
// makeVariantGraph
Rcpp::XPtr<GraphlineEJGraph> makeVariantGraph(Rcpp::String refRS, Rcpp::IntegerVector varS, Rcpp::IntegerVector varE, Rcpp::StringVector varSeq);
RcppExport SEXP _MMDIT_makeVariantGraph(SEXP refRSSEXP, SEXP varSSEXP, SEXP varESEXP, SEXP varSeqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type refRS(refRSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type varS(varSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type varE(varESEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type varSeq(varSeqSEXP);
    rcpp_result_gen = Rcpp::wrap(makeVariantGraph(refRS, varS, varE, varSeq));
    return rcpp_result_gen;
END_RCPP
}
// traverseSequenceGraph
Rcpp::XPtr<GraphlineTraversalDump> traverseSequenceGraph(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::String query, int maxEdit);
RcppExport SEXP _MMDIT_traverseSequenceGraph(SEXP sgrapSEXP, SEXP querySEXP, SEXP maxEditSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type query(querySEXP);
    Rcpp::traits::input_parameter< int >::type maxEdit(maxEditSEXP);
    rcpp_result_gen = Rcpp::wrap(traverseSequenceGraph(sgrap, query, maxEdit));
    return rcpp_result_gen;
END_RCPP
}
// traverseSequencesGraph
Rcpp::List traverseSequencesGraph(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::StringVector queries, int maxEdit);
RcppExport SEXP _MMDIT_traverseSequencesGraph(SEXP sgrapSEXP, SEXP queriesSEXP, SEXP maxEditSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type queries(queriesSEXP);
    Rcpp::traits::input_parameter< int >::type maxEdit(maxEditSEXP);
    rcpp_result_gen = Rcpp::wrap(traverseSequencesGraph(sgrap, queries, maxEdit));
    return rcpp_result_gen;
END_RCPP
}
// getTraversalEditDistances
Rcpp::IntegerVector getTraversalEditDistances(Rcpp::XPtr<GraphlineTraversalDump> toEx);
RcppExport SEXP _MMDIT_getTraversalEditDistances(SEXP toExSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineTraversalDump> >::type toEx(toExSEXP);
    rcpp_result_gen = Rcpp::wrap(getTraversalEditDistances(toEx));
    return rcpp_result_gen;
END_RCPP
}
// getTraversalsEditDistances
Rcpp::List getTraversalsEditDistances(Rcpp::List toExS);
RcppExport SEXP _MMDIT_getTraversalsEditDistances(SEXP toExSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type toExS(toExSSEXP);
    rcpp_result_gen = Rcpp::wrap(getTraversalsEditDistances(toExS));
    return rcpp_result_gen;
END_RCPP
}
// getTraversalHitNodes
Rcpp::IntegerVector getTraversalHitNodes(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::XPtr<GraphlineTraversalDump> toEx, int travInd);
RcppExport SEXP _MMDIT_getTraversalHitNodes(SEXP sgrapSEXP, SEXP toExSEXP, SEXP travIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineTraversalDump> >::type toEx(toExSEXP);
    Rcpp::traits::input_parameter< int >::type travInd(travIndSEXP);
    rcpp_result_gen = Rcpp::wrap(getTraversalHitNodes(sgrap, toEx, travInd));
    return rcpp_result_gen;
END_RCPP
}
// getTraversalsHitNodes
Rcpp::IntegerVector getTraversalsHitNodes(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::List toExS, Rcpp::IntegerVector travInds);
RcppExport SEXP _MMDIT_getTraversalsHitNodes(SEXP sgrapSEXP, SEXP toExSSEXP, SEXP travIndsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type toExS(toExSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type travInds(travIndsSEXP);
    rcpp_result_gen = Rcpp::wrap(getTraversalsHitNodes(sgrap, toExS, travInds));
    return rcpp_result_gen;
END_RCPP
}
// listGraphNodes
Rcpp::IntegerVector listGraphNodes(Rcpp::XPtr<GraphlineEJGraph> sgrap);
RcppExport SEXP _MMDIT_listGraphNodes(SEXP sgrapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    rcpp_result_gen = Rcpp::wrap(listGraphNodes(sgrap));
    return rcpp_result_gen;
END_RCPP
}
// enumerateTraversalPossibilities
Rcpp::List enumerateTraversalPossibilities(Rcpp::List toExS);
RcppExport SEXP _MMDIT_enumerateTraversalPossibilities(SEXP toExSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type toExS(toExSSEXP);
    rcpp_result_gen = Rcpp::wrap(enumerateTraversalPossibilities(toExS));
    return rcpp_result_gen;
END_RCPP
}
// countTraversalsMissedNodes
Rcpp::IntegerVector countTraversalsMissedNodes(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::List toExS, Rcpp::List travISet);
RcppExport SEXP _MMDIT_countTraversalsMissedNodes(SEXP sgrapSEXP, SEXP toExSSEXP, SEXP travISetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type toExS(toExSSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type travISet(travISetSEXP);
    rcpp_result_gen = Rcpp::wrap(countTraversalsMissedNodes(sgrap, toExS, travISet));
    return rcpp_result_gen;
END_RCPP
}
// findExplainingIndividuals
Rcpp::List findExplainingIndividuals(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::List toExS, int numInds, int maxMissNode);
RcppExport SEXP _MMDIT_findExplainingIndividuals(SEXP sgrapSEXP, SEXP toExSSEXP, SEXP numIndsSEXP, SEXP maxMissNodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type toExS(toExSSEXP);
    Rcpp::traits::input_parameter< int >::type numInds(numIndsSEXP);
    Rcpp::traits::input_parameter< int >::type maxMissNode(maxMissNodeSEXP);
    rcpp_result_gen = Rcpp::wrap(findExplainingIndividuals(sgrap, toExS, numInds, maxMissNode));
    return rcpp_result_gen;
END_RCPP
}
// expandTraversalEditSequence
Rcpp::List expandTraversalEditSequence(Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::XPtr<GraphlineTraversalDump> toEx, int travInd);
RcppExport SEXP _MMDIT_expandTraversalEditSequence(SEXP sgrapSEXP, SEXP toExSEXP, SEXP travIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineTraversalDump> >::type toEx(toExSEXP);
    Rcpp::traits::input_parameter< int >::type travInd(travIndSEXP);
    rcpp_result_gen = Rcpp::wrap(expandTraversalEditSequence(sgrap, toEx, travInd));
    return rcpp_result_gen;
END_RCPP
}
// expandTraversalGraphDifferences
Rcpp::List expandTraversalGraphDifferences(Rcpp::String refRS, Rcpp::XPtr<GraphlineEJGraph> sgrap, Rcpp::XPtr<GraphlineTraversalDump> toEx, int travInd);
RcppExport SEXP _MMDIT_expandTraversalGraphDifferences(SEXP refRSSEXP, SEXP sgrapSEXP, SEXP toExSEXP, SEXP travIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type refRS(refRSSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineEJGraph> >::type sgrap(sgrapSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<GraphlineTraversalDump> >::type toEx(toExSEXP);
    Rcpp::traits::input_parameter< int >::type travInd(travIndSEXP);
    rcpp_result_gen = Rcpp::wrap(expandTraversalGraphDifferences(refRS, sgrap, toEx, travInd));
    return rcpp_result_gen;
END_RCPP
}
// ksw2_gg_align
int ksw2_gg_align(std::string Tseq, std::string Qseq, Rcpp::IntegerVector opPos, Rcpp::IntegerVector ops, int sc_mch, int sc_mis, int gapo, int gape, bool extended);
RcppExport SEXP _MMDIT_ksw2_gg_align(SEXP TseqSEXP, SEXP QseqSEXP, SEXP opPosSEXP, SEXP opsSEXP, SEXP sc_mchSEXP, SEXP sc_misSEXP, SEXP gapoSEXP, SEXP gapeSEXP, SEXP extendedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type Tseq(TseqSEXP);
    Rcpp::traits::input_parameter< std::string >::type Qseq(QseqSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type opPos(opPosSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ops(opsSEXP);
    Rcpp::traits::input_parameter< int >::type sc_mch(sc_mchSEXP);
    Rcpp::traits::input_parameter< int >::type sc_mis(sc_misSEXP);
    Rcpp::traits::input_parameter< int >::type gapo(gapoSEXP);
    Rcpp::traits::input_parameter< int >::type gape(gapeSEXP);
    Rcpp::traits::input_parameter< bool >::type extended(extendedSEXP);
    rcpp_result_gen = Rcpp::wrap(ksw2_gg_align(Tseq, Qseq, opPos, ops, sc_mch, sc_mis, gapo, gape, extended));
    return rcpp_result_gen;
END_RCPP
}
// seqdiffs2seq
std::string seqdiffs2seq(std::string Tseq, Rcpp::IntegerVector positions, Rcpp::IntegerVector types, Rcpp::StringVector events, int initBuff);
RcppExport SEXP _MMDIT_seqdiffs2seq(SEXP TseqSEXP, SEXP positionsSEXP, SEXP typesSEXP, SEXP eventsSEXP, SEXP initBuffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type Tseq(TseqSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type positions(positionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< int >::type initBuff(initBuffSEXP);
    rcpp_result_gen = Rcpp::wrap(seqdiffs2seq(Tseq, positions, types, events, initBuff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MMDIT_str2int", (DL_FUNC) &_MMDIT_str2int, 2},
    {"_MMDIT_fst_buckleton", (DL_FUNC) &_MMDIT_fst_buckleton, 4},
    {"_MMDIT_makeVariantGraph", (DL_FUNC) &_MMDIT_makeVariantGraph, 4},
    {"_MMDIT_traverseSequenceGraph", (DL_FUNC) &_MMDIT_traverseSequenceGraph, 3},
    {"_MMDIT_traverseSequencesGraph", (DL_FUNC) &_MMDIT_traverseSequencesGraph, 3},
    {"_MMDIT_getTraversalEditDistances", (DL_FUNC) &_MMDIT_getTraversalEditDistances, 1},
    {"_MMDIT_getTraversalsEditDistances", (DL_FUNC) &_MMDIT_getTraversalsEditDistances, 1},
    {"_MMDIT_getTraversalHitNodes", (DL_FUNC) &_MMDIT_getTraversalHitNodes, 3},
    {"_MMDIT_getTraversalsHitNodes", (DL_FUNC) &_MMDIT_getTraversalsHitNodes, 3},
    {"_MMDIT_listGraphNodes", (DL_FUNC) &_MMDIT_listGraphNodes, 1},
    {"_MMDIT_enumerateTraversalPossibilities", (DL_FUNC) &_MMDIT_enumerateTraversalPossibilities, 1},
    {"_MMDIT_countTraversalsMissedNodes", (DL_FUNC) &_MMDIT_countTraversalsMissedNodes, 3},
    {"_MMDIT_findExplainingIndividuals", (DL_FUNC) &_MMDIT_findExplainingIndividuals, 4},
    {"_MMDIT_expandTraversalEditSequence", (DL_FUNC) &_MMDIT_expandTraversalEditSequence, 3},
    {"_MMDIT_expandTraversalGraphDifferences", (DL_FUNC) &_MMDIT_expandTraversalGraphDifferences, 4},
    {"_MMDIT_ksw2_gg_align", (DL_FUNC) &_MMDIT_ksw2_gg_align, 9},
    {"_MMDIT_seqdiffs2seq", (DL_FUNC) &_MMDIT_seqdiffs2seq, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_MMDIT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
